// Generated by CoffeeScript 2.3.0
var Finder, assertValid, exec, getLocalBranches, getRemoteBranches, git, isValid, optionTypes, os;

assertValid = require("assertValid");

isValid = require("isValid");

Finder = require("finder");

exec = require("exec");

os = require("os");

require("./getRemotes");

git = require("./core");

optionTypes = {
  raw: "boolean?"
};

module.exports = git.getBranches = function(repo, remoteName, opts) {
  assertValid(repo, "string");
  if (isValid(remoteName, "object")) {
    opts = remoteName;
    remoteName = null;
  } else {
    opts || (opts = {});
  }
  assertValid(remoteName, "string?");
  assertValid(opts, optionTypes);
  if (remoteName) {
    return getRemoteBranches(repo, remoteName, opts);
  } else {
    return getLocalBranches(repo, opts);
  }
};

getRemoteBranches = async function(repo, remoteName, opts) {
  var branches, findName, i, len, line, name, ref, remoteUri, remotes, stdout;
  remotes = (await git.getRemotes(repo));
  remoteUri = remotes[remoteName].push;
  stdout = (await exec(`git ls-remote --heads ${remoteUri}`, {
    cwd: repo
  }));
  if (opts.raw) {
    return stdout;
  }
  findName = Finder(/refs\/heads\/(.+)$/);
  branches = [];
  ref = stdout.split(os.EOL);
  for (i = 0, len = ref.length; i < len; i++) {
    line = ref[i];
    if (name = findName(line)) {
      branches.push(name);
    }
  }
  return branches;
};

getLocalBranches = async function(repo, opts) {
  var branches, findName, i, len, line, name, ref, stdout;
  stdout = (await exec("git branch", {
    cwd: repo
  }));
  if (opts.raw) {
    return stdout;
  }
  findName = Finder(/^[\*\s]+([a-zA-Z0-9_\-\.]+)$/);
  branches = [];
  ref = stdout.split(os.EOL);
  for (i = 0, len = ref.length; i < len; i++) {
    line = ref[i];
    if (name = findName(line)) {
      branches.push(name);
      if (line[0] === "*") {
        branches.current = name;
      }
    }
  }
  return branches;
};
