// Generated by CoffeeScript 2.3.0
// TODO: Test with `commit` being a non-existing commit.
// TODO: Test with `commit` being a non-existing branch.
var ResetMode, assertValid, exec, git, isValid, optionTypes, valido;

assertValid = require("assertValid");

isValid = require("isValid");

valido = require("valido");

exec = require("exec");

git = require("./core");

ResetMode = valido((function() {
  var values;
  values = ["soft", "hard", "mixed", "merge"];
  return {
    test: function(value) {
      return values.includes(value);
    },
    error: function() {
      return Error("Invalid reset mode");
    }
  };
})());

optionTypes = {
  mode: [ResetMode, "?"]
};

module.exports = git.resetBranch = async function(repo, commit, opts) {
  assertValid(repo, "string");
  if (isValid(commit, "object")) {
    opts = commit;
    commit = void 0;
  } else {
    opts || (opts = {});
  }
  assertValid(commit, "string?");
  assertValid(opts, optionTypes);
  if (commit === null) {
    await exec("git update-ref -d HEAD", {
      cwd: repo
    });
    if (opts.mode === "hard") {
      await exec("git reset --hard", {
        cwd: repo
      });
    }
    return;
  }
  // TODO: Resolve with the new HEAD commit
  await exec("git reset", "--" + (opts.mode || "mixed"), commit || "HEAD", {
    cwd: repo
  });
};
