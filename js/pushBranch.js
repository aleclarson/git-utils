// Generated by CoffeeScript 1.12.4
var assertValid, exec, git, isValid, optionTypes, os;

assertValid = require("assertValid");

isValid = require("isValid");

exec = require("exec");

os = require("os");

require("./getBranch");

git = require("./core");

optionTypes = {
  upstream: "boolean?",
  force: "boolean?"
};

module.exports = git.pushBranch = function(modulePath, remoteName, options) {
  var args;
  if (options == null) {
    options = {};
  }
  if (isValid(remoteName, "object")) {
    options = remoteName;
    remoteName = "origin";
  } else {
    if (remoteName == null) {
      remoteName = "origin";
    }
  }
  assertValid(modulePath, "string");
  assertValid(remoteName, "string");
  assertValid(options, optionTypes);
  args = [remoteName];
  return git.getBranch(modulePath).then(function(currentBranch) {
    if (currentBranch === null) {
      throw Error("An initial commit must exist!");
    }
    if (options.upstream) {
      args.push("-u", currentBranch);
    }
    if (options.force) {
      args.push("-f");
    }
    return exec.async("git push", args, {
      cwd: modulePath
    }).fail(function(error) {
      var regex;
      if (!options.force) {
        if (/\(non-fast-forward\)/.test(error.message)) {
          throw Error("Must force push to overwrite remote commits!");
        }
      }
      regex = RegExp("(\\+|\\s)[\\s]+([a-z0-9]{7})[\\.]{2,3}([a-z0-9]{7})[\\s]+(HEAD|" + currentBranch + ")[\\s]+->[\\s]+" + currentBranch);
      if (regex.test(error.message)) {
        return;
      }
      regex = RegExp("\\*[\\s]+\\[new branch\\][\\s]+" + currentBranch + "[\\s]+->[\\s]+" + currentBranch);
      if (regex.test(error.message)) {
        return;
      }
      throw error;
    });
  });
};
